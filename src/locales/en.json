{
  "common": {
    "user": {
      "email": "Mail",
      "password": "password",
      "passwordNew": "new password",
      "passwordConfirm": "Repeat password",
      "name": "Name",
      "avatar": "Avatar link",
      "account": "Account"
    },
    "role": {
      "admin": "administrator",
      "user": "Unauthorized user",
      "authUser": "Authorized user",
      "guest": "tourists"
    },
    "action": {
      "login": "Log in",
      "next": "Next step",
      "logout": "Log out",
      "newData": "Add new data",
      "new": "New",
      "create": "create",
      "send": "send",
      "update": "renew",
      "delete": "delete",
      "edit": "edit",
      "search": "Find",
      "ok": "Sure",
      "cancel": "Cancel",
      "start": "start",
      "copy": "copy",
      "clone": "clone",
      "clear": "Clear",
      "refresh": "refresh",
      "enable": "enable",
      "save": "save",
      "download": "download",
      "reset": "reset",
      "open": "Open",
      "close": "closure",
      "preview": "Preview",
      "loadMore": "View more",
      "restore": "recover",
      "change": "Revise",
      "connectionTest": "Edit server address",
      "createRecord": "Create data",
      "createTable": "Create data table",
      "editTable": "Edit data table information",
      "deleteTable": "Delete data table",
      "truncateData": "Clear data",
      "uploadFile": "Upload files",
      "uploadImage": "Upload pictures",
      "verified": "Passed verification",
      "changePassword": "Change password",
      "deleteSelected": "Delete selected",
      "saveAndContinue": "Save and continue",
      "sendTestEmail": "Send test email",
      "sendVerificationEmail": "Send account verification email",
      "sendLoginEmail": "Remind users of login status via email",
      "sendResetEmail": "Send password reset email",
      "learnMore": "Click to learn more",
      "review": "check",
      "checkLocale": "switch language",
      "checkTheme": "switch theme",
      "export": "Export",
      "import": "import",
      "copyJson": "Copy JSON data",
      "exportJson": "Export to JSON file",
      "importJson": "Import from JSON file"
    },
    "tip": {
      "enabled": "enable",
      "disabled": "Disable",
      "public": "public",
      "required": "necessary",
      "optional": "Optional",
      "private": "private",
      "style": "provider",
      "serviceNotEnabled": "The service has not been enabled yet",
      "envPrevention": "Prevent data loss from triggering unexpected actions in production environments",
      "administratorPreference": "Whether to prefer this field in the relationship list in the administrator UI (default is auto)"
    },
    "database": {
      "baseTable": "Base",
      "viewTable": "view",
      "authTable": "Certification",
      "table": "data sheet",
      "tableName": "Data table name",
      "query": "Query",
      "field": "Field",
      "createPresetField": "Add field (default)",
      "data": "table data",
      "index": "index",
      "unique": "Data uniqueness constraints",
      "setIndex": "Set index",
      "pageNumber": "Number of pages",
      "amountOfData": "Data volume",
      "sort": "sort",
      "SortingRules": "Sorting rules",
      "fieldPreset": {
        "string": "string",
        "editor": "rich text",
        "number": "number",
        "bool": "Boolean",
        "email": "mail",
        "url": "URL",
        "datetime": "date",
        "json": "JSON",
        "text": "normal text"
      }
    },
    "menu": {
      "collection": "Data panel",
      "log": "log",
      "setting": "set up",
      "appConfig": "application",
      "smtpConfig": "Mail service",
      "storageConfig": "object storage",
      "backupConfig": "Data backup",
      "oauth2": "OAuth2.0 authentication"
    },
    "placeholder": {
      "type": "type",
      "description": "describe",
      "params": "parameter",
      "option": "Options",
      "preset": "Default",
      "style": "style",
      "docs": "document",
      "forAuth": "for authentication",
      "forOther": "Other uses",
      "requestVerification": "issue verification",
      "confirmVerification": "Accept verification",
      "fileName": "file name",
      "apiUrl": "API / interface address",
      "apiQueryParameters": "URL required parameters",
      "apiPathParameters": "Interface URL path composition parameters",
      "apiParameters": "Request body JSON key name",
      "apiResponses": "Response content example",
      "authMethod": "Authentication method",
      "amountOfRequest": "Request volume",
      "hoverToSee": "View with mouse hover",
      "accountPasswordLogin": "Custom fields + password",
      "thirdPartyAuthorization": "Third-party login authorization",
      "searchTerm": "Search term or filter, example > '2022-01-01'...",
      "autoGenerate": "Leave blank to automatically generate",
      "autoDisable": "Leave blank to disable",
      "checkPublic": "Make emails public or private",
      "displayedField": "Display fields",
      "searchTable": "Search datasheet",
      "unfoldTable": "Expand system data table",
      "collapseTable": "Collapse system data table",
      "sendOtpEmail": "Send one-time verification password to email",
      "eventDataFormat": "SSE event data format",
      "searchDataPrompt": "Search data, supported matching rules such as created > \"2022-01-01\"",
      "searchLogPrompt": "Search logs, supported matching rules such as level > 0 && data.auth = “guest”"
    },
    "popup": {
      "mockNewToken": {
        "name": "Manually generate verification token",
        "content": {
          "1": "Generate a fixed authentication token for user { email }"
        }
      },
      "logSetting": {
        "name": "Log settings",
        "logDetail": "Log details",
        "maxDaysRetention": "Log retention days",
        "minLogLevel": "Log level",
        "enableIpLog": "Record visitor IP",
        "enableAuthLog": "Record the authorizer ID",
        "content": {
          "1": "Setting to 0 will clear the current log data and turn off the logging function",
          "2": "Log data that is greater than the level corresponding to the “number” above will be included."
        }
      },
      "accountSetting": {
        "name": "Account settings",
        "content": {
          "1": "Here you can view and export the current configuration information, or export and import it to another PocketBase environment.",
          "2": "Send account verification email to { email }",
          "3": "Send password reset email to { email }"
        }
      },
      "editTableInfo": {
        "name": "Are you sure you want to modify the basic information of the \"{ tableName }\" data table?",
        "content": {
          "1": "If the field to be deleted or modified is associated with another data table, you need to manually update the other table references accordingly!",
          "2": "All data associated with the changed fields will be permanently deleted!",
          "3": "Create field index"
        }
      },
      "apiRequestPermission": {
        "name": "Interface request permission",
        "content": {
          "1": "Add new data interface rules",
          "2": "Delete data interface rules",
          "3": "Update data interface rules",
          "4": "Query data interface rules",
          "5": "View data interface rules",
          "6": "Authentication data interface rules"
        },
        "action": {
          "showList": "Expand the list of available fields",
          "hideList": "Collapse list of available fields",
          "setAdminRule": "Click Settings Only administrators can request",
          "unlockAdminRule": "Currently only administrators can request, click to unlock"
        }
      },
      "apiDocs": {
        "getListApi": {
          "name": "Paginated query / GET",
          "content": {
            "1": "Returns all data in the \"{ tableName }\" table, and supports paging query, sorting and filtering"
          }
        },
        "getViewApi": {
          "name": "Single query / GET",
          "content": {
            "1": "Query a \"{ tableName }\" table data based on ID"
          }
        },
        "createDataApi": {
          "name": "Create data/POST",
          "content": {
            "1": "Add a new \"{ tableName }\" table data"
          }
        },
        "updateDataApi": {
          "name": "Single update/PATCH",
          "content": {
            "1": "Update a \"{ tableName }\" table data based on ID"
          }
        },
        "deleteDataApi": {
          "name": "Single delete / DELETE",
          "content": {
            "1": "Delete a piece of \"{ tableName }\" table data based on ID"
          }
        },
        "sseApi": {
          "name": "Bulk Subscription/SSE",
          "content": {
            "1": "Subscribe to real-time changes to the \"{ tableName }\" table via Server Sent Events (SSE)"
          }
        },
        "batchApi": {
          "name": "Unified addition, deletion, modification and query/POST",
          "content": {
            "1": "Implemented in a single request: create/update/modify/delete multiple \"{ tableName }\" table records, and support batch processing and transactions"
          }
        },
        "getAuthMethods": {
          "name": "Query user authorization method / GET",
          "content": {
            "1": "Query the list of \"identity authorization methods\" supported by the server"
          }
        },
        "authWithPassword": {
          "name": "Password authorization / POST",
          "content": {
            "1": "Use email or other fields to combine the password and finally initiate a verification authorization request"
          }
        },
        "authWithOAuth2": {
          "name": "OAuth2 Authorization/POST",
          "content": {
            "1": "Authenticates using an OAuth2 provider and returns a new authentication token and record data"
          }
        },
        "authWithOTP": {
          "name": "OTP authorization / POST",
          "content": {
            "1": "Authenticate using one-time password (OTP)"
          }
        },
        "authRefresh": {
          "name": "Refresh authorization status / POST",
          "content": {
            "1": "Create a new authorization token for an already authorized data request"
          }
        },
        "verification": {
          "name": "Send authentication request/POST",
          "content": {
            "1": "Verify that the user account is valid, for example by sending an email"
          }
        },
        "passwordReset": {
          "name": "Send reset password verification / POST",
          "content": {
            "1": "Send a user password reset request, for example by sending an email"
          }
        },
        "changeEmail": {
          "name": "Change email/POST",
          "content": {
            "1": "If the user changes the account email address by himself, he needs to verify it through this interface, for example, by sending an email."
          }
        }
      }
    },
    "message": {
      "loading": "Loading...",
      "notAnyData": "no data",
      "createSuccess": "Created successfully",
      "updateSuccess": "Update successful",
      "deleteSuccess": "Delete successfully",
      "createError": "Creation failed",
      "updateError": "Update failed",
      "deleteError": "Delete failed",
      "notFountData": "No data yet",
      "applyNewSetting": "Successfully updated configuration information",
      "defaultValue": "Default is \"{ default }\"",
      "defaultPageNumber": "By default, the data on page 1 is returned",
      "defaultLimitNumber": "By default, 30 pieces of data are returned per page",
      "selectedPrompt": "{ selected } pieces of data are selected",
      "deletePrompt": "Are you sure you want to delete \"{ value }\"?",
      "deleteSelectedPrompt": "Are you sure you want to delete all selected data?",
      "deleteDataPrompt": "Are you sure you want to delete \"{ value }\", including the data associated with it?",
      "unlinkProviderPrompt": "Are you sure you want to remove the provider \"{ provider }\"?",
      "notAnyTables": "You don't have any data tables yet",
      "checkServerConnect": "The current service is unavailable, please check connectivity manually!",
      "oauth2AuthFailed": "OAuth2 authentication failed",
      "sendOtpEmailPrompt": "Check your {otpEmail} inbox and enter the OTP below.",
      "dataVerificationFailed": "Unable to verify submission data",
      "plaseTryAgain": "You can close this window and try again",
      "sendEmailSussess": "Tried sending email to: { email }",
      "recovery": "Do you want to restore the last automatically saved data?",
      "unsave": "The data has not been saved. Are you sure you want to leave?",
      "noOa2Provider": "The OAuth2 application has not been configured yet",
      "insufficientAuthority": "Insufficient permissions",
      "noAccess": "No access",
      "networkError": "Network error, please try again later",
      "copySuccess": "Successfully copied to clipboard!",
      "followRules": "Requesting permissions follows the rules: { url }",
      "missingContext": "Data context content has been lost!",
      "uploadReminder": "Please make sure the files you upload are safe!\nAre you sure you want to upload the file \"{ fileName }\"?"
    },
    "subfield": {
      "pin": "fixed",
      "unPin": "Unpin",
      "otherTable": "other",
      "systemTable": "system",
      "basicSetting": "Basic settings",
      "syncSetting": "Configuration information"
    }
  },
  "page": {
    "login": {
      "title": "Backend login",
      "action": {
        "forgetPsw": "forget the password"
      }
    },
    "forget": {
      "title": "Retrieve password",
      "content": {
        "1": "Enter your email address and we'll send you a 'link to reset your password'",
        "2": "The email has been tried to be sent to '{email}'. If it is not received, it means: 1. The user's mailbox does not exist. 2. It has been collected in the email recycle bin."
      },
      "action": {
        "goToLogin": "Go back and log in"
      }
    },
    "init": {
      "title": "Create the first admin user",
      "action": {
        "createUser": "Create and log in"
      },
      "content": {
        "1": "Welcome to PocketBase",
        "2": "Enter at least 10 characters"
      }
    },
    "collection": {
      "content": {
        "action": {
          "apiPreviewme": "Interface documentation"
        }
      },
      "sideBar": {},
      "dialog": {}
    },
    "log": {
      "logLevel": "Log classification:",
      "adminLog": "show administrator log",
      "table": {
        "field": {
          "level": "Request results",
          "message": "Request details",
          "createAt": "Created in"
        }
      }
    },
    "setting": {
      "content": {
        "application": {
          "nowAppName": "Current site title",
          "serverUrl": "Backend service address",
          "proxy": {
            "title": "Get the real IP of the client",
            "curIp": "Detected that your current IP is",
            "curProxyHeader": "Detected client proxy header",
            "trustedHeaders": "Trusted client request header",
            "priorityIp": "final adoption",
            "content": {
              "1": "When PocketBase is deployed on a platform such as Fly, or accessed through a proxy such as NGINX, requests from different users will come from the same IP address (i.e. the IP of the proxy connected to your PocketBase application)",
              "2": "In this case, to get the actual user IP (for rate limiting, logging, etc.) you need to configure your proxy correctly and list the following trusted headers that PocketBase can use to extract the user IP",
              "3": "When using such a proxy, to prevent spoofing, it is recommended",
              "4": "Use headers that can only be controlled by the proxy and cannot be set manually by the user",
              "5": "Make sure the PocketBase server is only accessible through a proxy",
              "6": "If PocketBase is not deployed behind a proxy, you can clear the header information fields",
              "7": "Separate with half-width commas to configure multiple, single such as",
              "8": "Not applicable / invalid server proxy configuration"
            },
            "tip": {
              "1": "Configured proxy headers do not match detected ones",
              "2": "In some cases, a proxy server may return multiple IP addresses in the HTTP header. Typically these IP addresses are arranged in order from farthest to nearest. In this case, the rightmost IP address is usually that of the client. The actual IP address is therefore considered the most reliable or \"more trustworthy\". However, this is not a hard and fast rule as different proxy servers may have different implementations.",
              "3": "The IP on the far left",
              "4": "The IP on the far right",
              "5": "If what is displayed is not the actual IP of your current client, it means you need to configure an available proxy for the server.",
              "6": "Proxy header detected, recommended to be listed as trusted!"
            }
          },
          "rate": {
            "title": "Limit request frequency",
            "route": "routing",
            "maximum": "frequency",
            "intervalTime": "Interval/second",
            "roleToLimit": "Restricted objects",
            "action": {
              "addRule": "Add new restrictions"
            },
            "content": {
              "1": "Rate limit label format",
              "2": "Rate limiting rules are parsed in the following order (stopping on first match)",
              "3": "If multiple rules have the same label but target different user audiences (e.g. 'guest' vs. 'auth'), only the matching audience rule will be considered",
              "4": "Rate limit labels can be in one of the following formats:"
            }
          },
          "batch": {
            "title": "Interface load limit",
            "maxConcurrentRequest": "Maximum number of simultaneous requests",
            "requestTimeout": "Request timeout setting (unit: seconds)",
            "requestBodySize": "Request body size limit (unit: bytes)"
          },
          "action": {
            "hideEditControl": "Hidden data creation and editing entrance"
          }
        },
        "smtp": {
          "title": "SMTP configuration",
          "senderNickname": "Sender's nickname",
          "senderEmail": "Sender's email",
          "userEmail": "Recipient email",
          "action": {
            "smtpEnable": "Enable mail service",
            "expandDetail": "Expand more options",
            "hideDetail": "Hide more options"
          },
          "content": {
            "1": "When closed, PocketBase will use the unix \"sendmail\" command to send emails (this function is no longer available). In order to ensure that emails are sent, please also configure the SMTP mail server yourself.",
            "2": "Some SMTP servers, such as Gmail SMTP-relay, require an appropriate domain name in the initial EHLO/HELO exchange to identify the server sending the mail. Using 'localhost' or an invalid domain name may cause the SMTP server to refuse the connection, as they usually require authentication. Server for sending emails to prevent abuse and spam",
            "3": "Authentication",
            "4": "Password reset",
            "5": "Change email",
            "6": "Send one-time password",
            "7": "Login status alarm"
          },
          "smtpHost": "SMTP service address",
          "smtpPort": "SMTP port",
          "smtpUsername": "SMTP username",
          "smtpPassword": "SMTP key",
          "tlsEncryption": "TLS encryption",
          "authMethod": "Authentication method",
          "ehloOrHeloDomain": "Domain name provided to the mail server for verification (EHLO/HELO)"
        },
        "fileStorage": {
          "content": {
            "1": "Use local file system by default to store uploaded files",
            "2": "If you have limited disk space, you can choose to enable S3 Object Storage to store your files in cloud storage",
            "3": "If files uploaded by users exist locally, please manually transfer them to the new object storage",
            "4": "There are many command line tools that can help you, such as:"
          },
          "action": {
            "s3Enable": "Enable and configure S3 object storage",
            "usePathStyleUrl": "Using path style S3 URLs"
          },
          "endpoint": "Endpoint",
          "bucket": "Bucket",
          "region": "Region",
          "accessKey": "Access Key",
          "secret": "Security Key (Secret)"
        },
        "backup": {
          "cronExpression": "CRON expression",
          "maxBackupFilesNum": "Maximum number of backup files to retain",
          "content": {
            "1": "Data backup & recovery",
            "2": "No backup files yet",
            "3": "Please note that during the backup, other concurrent write requests may fail because the database will be temporarily 'locked' (usually happens during ZIP generation)",
            "4": "If you are using S3 storage to upload collection files, you will need to back them up separately as they are not stored locally and will not be included in the final backup!",
            "5": "The input content needs to carry the “.zip” suffix, and the name can only contain numbers, English, underscores, and minus signs.",
            "6": "Backup/restore operation in progress",
            "7": null,
            "8": "Backup recovery is experimental and only works on UNIX-based operating systems!",
            "9": "Please proceed with caution and it is recommended to manually save some historical backup files to your other storage.",
            "10": "The current operation will overwrite the contents of the \"pb_data\" directory on the server side, and the application process will be automatically restarted after the operation is completed.",
            "11": "This means that once successful, all your current data (including data table contents, users, super users, etc.) will be completely overwritten by the new data.",
            "12": "If the backup file is invalid or incompatible, the rollback will eventually occur without data loss (e.g. \"data.db\" data).",
            "13": "Please enter the current backup file name to confirm the operation",
            "14": "Daily: 00:00",
            "15": "Every Sunday: 00:00",
            "16": "Every Monday and Wednesday: 00:00",
            "17": "The first day of each month: 00:00"
          },
          "action": {
            "createBackup": "Create a backup file (.zip)",
            "uploadBackup": "Upload additional backup files (.zip)",
            "restoreBackup": "Restore data from backup files",
            "moreBackupOption": "Automatic backup / automatic upload to S3 storage",
            "enableAutoBackup": "Enable scheduled automatic backup",
            "backupToS3": "Automatically upload backup files to S3 storage",
            "usePathStyleUrl": "Using path style S3 URLs",
            "backupName": "Backup name"
          }
        },
        "sync": {
          "export": {
            "title": "Export the current configuration information to quickly restore to the new environment later"
          },
          "import": {
            "title": "You can paste the JSON configuration directly, or:"
          }
        }
      }
    }
  }
}